#version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    hostname: zookeeper
    ports:
      - "22181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: echo srvr | nc zookeeper 2181 || exit 1
      interval: 10s
      retries: 3
      start_period: 10s
      timeout: 10s
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-log:/var/lib/zookeeper/log
    networks:
      - ecommerce-analytics-network

  kafka-1:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka-1
    hostname: kafka-1
    ports:
      - "9092:9092"
      - "9093:9093"
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      # Reduced message size limits (default was too large)
      KAFKA_MESSAGE_MAX_BYTES: 5242880
      KAFKA_REPLICA_FETCH_MAX_BYTES: 5242880
      # Add socket request max bytes 
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 5242880
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_JMX_PORT: 9999
    healthcheck:
      test: nc -z kafka-1 9092 || exit 1
      interval: 10s
      retries: 3
      start_period: 30s
      timeout: 10s
    volumes:
      - kafka-1-data:/var/lib/kafka/data
    networks:
      - ecommerce-analytics-network

  kafka-2:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka-2
    hostname: kafka-2
    ports:
      - "9094:9094"
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-2:9092,PLAINTEXT_HOST://localhost:9094
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      # Reduced message size limits (default was too large)
      KAFKA_MESSAGE_MAX_BYTES: 5242880
      KAFKA_REPLICA_FETCH_MAX_BYTES: 5242880
      # Add socket request max bytes 
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 5242880
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_JMX_PORT: 9999
    healthcheck:
      test: nc -z kafka-2 9092 || exit 1
      interval: 10s
      retries: 3
      start_period: 30s
      timeout: 10s
    volumes:
      - kafka-2-data:/var/lib/kafka/data
    networks:
      - ecommerce-analytics-network
      
  kafka-3:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka-3
    hostname: kafka-3
    ports:
      - "9095:9095"
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-3:9092,PLAINTEXT_HOST://localhost:9095
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      # Reduced message size limits (default was too large)
      KAFKA_MESSAGE_MAX_BYTES: 5242880
      KAFKA_REPLICA_FETCH_MAX_BYTES: 5242880
      # Add socket request max bytes 
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 5242880
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_JMX_PORT: 9999
    healthcheck:
      test: nc -z kafka-3 9092 || exit 1
      interval: 10s
      retries: 3
      start_period: 30s
      timeout: 10s
    volumes:
      - kafka-3-data:/var/lib/kafka/data
    networks:
      - ecommerce-analytics-network

  schema-registry:
    image: confluentinc/cp-schema-registry:7.4.0
    container_name: schema-registry
    hostname: schema-registry
    depends_on:
      kafka-1:
        condition: service_healthy
      kafka-2:
        condition: service_healthy
      kafka-3:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka-1:9092,kafka-2:9092,kafka-3:9092
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    healthcheck:
      test: curl --fail http://schema-registry:8081/subjects || exit 1
      interval: 10s
      retries: 3
      start_period: 30s
      timeout: 10s
    networks:
      - ecommerce-analytics-network

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.4.0
    container_name: control-center
    hostname: control-center
    depends_on:
      kafka-1:
        condition: service_healthy
      kafka-2:
        condition: service_healthy
      kafka-3:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: kafka-1:9092,kafka-2:9092,kafka-3:9092
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONTROL_CENTER_REPLICATION_FACTOR: 3
      CONTROL_CENTER_CONNECT_CLUSTER: http://connect:8083
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONTROL_CENTER_STREAMS_NUM_STREAM_THREADS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 3
      PORT: 9021
    volumes:
      - control-center-data:/var/lib/confluent-control-center
    healthcheck:
      test: curl --fail http://control-center:9021/health || exit 1
      interval: 10s
      retries: 3
      start_period: 30s
      timeout: 10s
    networks:
      - ecommerce-analytics-network

  # Optional: Kafka Connect for data connectors
  connect:
    image: confluentinc/cp-kafka-connect:7.4.0
    container_name: connect
    hostname: connect
    depends_on:
      kafka-1:
        condition: service_healthy
      kafka-2:
        condition: service_healthy
      kafka-3:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka-1:9092,kafka-2:9092,kafka-3:9092
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 3
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 3
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 3
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
    healthcheck:
      test: curl --fail http://connect:8083/ || exit 1
      interval: 30s
      retries: 5
      start_period: 90s
      timeout: 20s
    restart: on-failure
    networks:
      - ecommerce-analytics-network

  spark-streaming:
    build:
      context: ./spark-streaming
      dockerfile: Dockerfile
    container_name: spark-streaming
    depends_on:
      kafka-1:
        condition: service_healthy
      kafka-2:
        condition: service_healthy
      kafka-3:
        condition: service_healthy
    volumes:
      - ./spark-streaming/data:/data
      - ./spark-streaming/logs:/logs
    networks:
      - ecommerce-analytics-network
    ports:
      - "4040:4040"  # Spark UI
    restart: on-failure

volumes:
  zookeeper-data:
  zookeeper-log:
  kafka-1-data:
  kafka-2-data:
  kafka-3-data:
  control-center-data:

networks:
  ecommerce-analytics-network:
    driver: bridge